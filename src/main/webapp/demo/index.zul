<!-- protect page by the authentication init  --> 
<?init class="org.hpccsystems.dashboard.controller.AuthenticationInit"?>

<!-- authentication init have to locate before composition -->
<?init class="org.zkoss.zk.ui.util.Composition" arg0="/demo/layout/template.zul"?>

<?style src="css/bootstrap/css/bootstrap.min.css"?>
<?script src="js/lib/jquery-ui.custom.js"?>
<?style src="css/jquery-ui.css"?>
<?script src="js/common.js"?>

<?script src="js/Visualization/widgets/lib/requirejs/require.js"?>

<?script src="http://www.google.com/jsapi"?>

<?style src="css/dashboard.css"?>
<?style src="css/flat.css"?>

<zk >
	<script type="text/javascript"><![CDATA[
		function showCreationError(divId) {
			var divElement = jq('$'+divId).empty();
			var container = jq("#" + divElement.attr("id"));
			
			container.append("Error");
			
			console.log(container);
			jq('$'+divId).append("Error occurred while creating this chart");
		}
		
function createXYChart (divId, chartData) {
	
	
	require([ "js/Visualization/widgets/config" ], function(config) {

		requirejs.config({
			baseUrl : "js/Visualization/widgets"
		});
		
		//displayCharts(c3JSON['data']['types'][c3JSON['data']['rows'][0][0]],c3JSON);
		
		displayCharts();
		
		function displayCharts() {
			require(["d3/d3","src/c3/Pie", "src/c3/Line", "src/c3/Column"], function (d3,C3Pie, C3Line, C3Column) {
				
				console.log(d3);
				
				
				var response = jq.parseJSON(chartData);
				var divElement = jq('$'+divId).empty();
				
				var showLegend = false;
				if(Object.keys(response.chartTypes).length > 1) {
					showLegend = true;
				} 
				var showSecondAxis = false;
				if(response.secondaryYAxisLabel.length){
					showSecondAxis = true;
				}
				var rotateAxis = false;
				if(response.rotateAxis){
					rotateAxis = true;
				}
				var yColumnMargin = 20;
				if(showLegend){yColumnMargin = 60}
				
				var container = jq("#" + divElement.attr("id"));
				
				var filter_desc = "";
				if(response.isFiltered){
					filter_desc = "<span class='btn-link btn-sm' style='float: right; padding: 0px 10px;' id='"+ response.portletId +"_title'> Filters </span>" +
							"<div id='"+ response.portletId +"_filter_content' style='line-height: initial;position: absolute;padding: 2px;border: 1px solid rgb(124, 124, 124);margin: 5px;background-color: rgb(177, 177, 177);font-size: small;color: white;z-index: 2; display: none'>"+ response.filterDescription +"</div>" +
							"<script type='text/javascript'>" +
								"jq('#"+ response.portletId +"_title').mouseenter(function() {" +
										"jq('#"+ response.portletId +"_filter_content').show();" +
												"})" +
								".mouseleave(function() { " +
										"jq('#"+ response.portletId +"_filter_content').hide();});" +
							"</script>";
				}
				
				container.append(jq("<div style='margin-top: 3px; margin-left: 5px; height: 15px;'>"+ filter_desc + " </div>" ));
				
				container.append(
							jq( "<div id='"+ response.portletId + "holderDiv" +"'> Rendering chart... </div>" )
						);
				
				var fullHeight = divElement.height();
				var fullWidth = divElement.width();
				
				if(fullWidth < 50 ){ fullWidth = 400; }
				if(fullHeight < 50 ){ fullHeight = 385; }
				
				var isLargeGraph = false;
				if(response.xCategoryLabels.length > 25){
					isLargeGraph = true;
				}
				
				var xAxisType = 'categorized';
				var timeFormat = null, timeColumnName = null, xAxisDisplayFormat = null,yMin=null,yMax=null;y2Max=null;y2Min=null;
				if(response.timeseries.isEnabled) {
					xAxisType = 'timeseries';
					timeFormat = response.timeseries.format;
					timeColumnName = response.xAxisLabel;
					xAxisDisplayFormat = response.timeseries.displayFormat;
				}
				
				if(response.yMin) {
					yMin=response.yMin;
				}
				if(response.yMax) {
					yMax=response.yMax;
				}
				if(response.y2Min){
					y2Min = response.y2Min;
				}
				if(response.y2Max) {
					y2Max=response.y2Max;
				}
				c3JSON = {
						data: {
							x: timeColumnName,
						    xFormat : timeFormat,
							rows: response.dataRows,	
							types: response.chartTypes,
							axes:response.axes				
						},
						bindto: "#" + response.portletId + "holderDiv",
						size: { 
							width:fullWidth - 5,
							height:fullHeight - 25
						},
						bar:{
							width:{
				            ratio: 0.5 // this makes bar width 50% of length between ticks
						    },
						    zerobased:false
						},
						axis: {
							y: {
								min: yMin,
								max: yMax,
					            padding: {top:0, bottom:0},
								tick: {
					                format: d3.format(".2s")
					            },
					            label: {
					                text: response.primaryYAxisLabel,
					                position: 'outer-middle'
					            }
							},
							x: {
								type: xAxisType,
								categories: response.xCategoryLabels,
								tick: {
									format: xAxisDisplayFormat
						        },
								label: {
					                text: response.xAxisLabel,
					                position: 'outer-center'
					            }
							},
							y2: {
								min: y2Min,
								max: y2Max,
					            padding: {top:0, bottom:0},
								tick: {
					                format: d3.format(".2s")
					            },
					            label: {
					                text: response.secondaryYAxisLabel		                
					            },
					            show: showSecondAxis		            
					        },		       
					       rotated: rotateAxis
						},
						tooltip: {
					        format: {
					            value: d3.format('f')
					        }
					    },
						legend: {
					        show: showLegend,
					        equally: true
					    },
						subchart: {
					        show: isLargeGraph
					    },
						zoom: {
					        enabled: false
					    }
					};
				
				console.log(JSON.stringify(c3JSON));

				type = c3JSON['data']['types'][c3JSON['data']['rows'][0][0]];
				
								
				//  C3 Charts ---
				if(type == 'bar') {
					new C3Column()
						.target(response.portletId + "holderDiv")
						.setChartData(c3JSON,'bar')
						.render();	
				} else if (type == 'pie') {
					new C3Pie()
						.target(response.portletId + "holderDiv")
						.testData()
						.setChartData(c3JSON,'pie')
						.render();
				} else if (type == 'line') {
					new C3Line()
						.target(response.portletId + "holderDiv")
						.setChartData(c3JSON,'line')
						.render();
				}
			   
			});
		}
	});

}
]]></script>
	<style>
		.glyphicon {
			margin-right: 3px;
		}
		.glyphicon-numeric {
			width: 14px;
		    content: url("css/images/numeric.png");
		}
		.glyphicon-string {
			width: 14px;
		    content: url("css/images/string.png");
		}
		
		.error-label {
			display: table-cell;
			text-align: center;
			vertical-align: middle;
			color: crimson;
			font-size: 16px;
			line-height: normal;
		}
		.error-div {
			display: table;
			width: 100%;
			height: 100%;
			background: whitesmoke;
		}
		.fine-print {
			font-size: 11px;
			color: black;
		}
		.dark-vbox {
			background: whitesmoke;
		}
		.input-parmbox {
			display: block;
			width: 100% !important;
			min-height: 50px;			
		}
		.clear-text-btn {
			float: right;
			text-decoration: none !important;
			outline: none !important;
			color: black;
		}
		
		
		.html-container > .z-html {
		    display: inline-block;
		    margin: 5px;
		}
		
		.close-btn {
			float: right;
		}
		.close-btn:hover {
			color: red;
		}
		
		.html-container {
			overflow: auto;
		}
		
	</style>
	<include id="mainInclude" self="@define(content)" src="layout/dashboard.zul" />
</zk> 
